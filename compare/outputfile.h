// This file was automatically generated by vbp_routine_gen.py

namespace morphstore {

// ----------------------------------------------------------------------
// Compression
// ----------------------------------------------------------------------

template<class t_vector_extension>
class morph_batch_t<
        t_vector_extension,
        vbp_l<16, t_vector_extension::vector_helper_t::element_count::value>,
        uncompr_f
> {
    using t_ve = t_vector_extension;
    IMPORT_VECTOR_BOILER_PLATE(t_ve)

    static const unsigned m_Bw = 16;

    using dst_l = vbp_l<m_Bw, t_vector_extension::vector_helper_t::element_count::value>;

public:
#ifdef VBP_FORCE_INLINE_PACK
    MSV_CXX_ATTRIBUTE_FORCE_INLINE
#endif
    static void apply(
            const uint8_t * & in8, uint8_t * & out8, size_t countInLog
    ) {
        using namespace vectorlib;

        vector_t tmp = vectorlib::set1<t_ve, vector_base_t_granularity::value>(0);
        vector_t tmp2;

        const base_t * inBase = reinterpret_cast<const base_t *>(in8);
        base_t * outBase = reinterpret_cast<base_t *>(out8);

        const size_t cycleLenVec = 4;
        const size_t cycleLenBase = cycleLenVec * vector_element_count::value;
        const size_t cycleCount = countInLog / cycleLenBase;
        for(size_t i = 0; i < cycleCount; i++) {
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 0));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 16));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 32));
            tmp2 = load<t_ve, iov::ALIGNED, vector_size_bit::value>(inBase);
            inBase += vector_element_count::value;
            tmp = bitwise_or<t_ve>(tmp, shift_left<t_ve>::apply(tmp2, 48));
            store<t_ve, iov::ALIGNED, vector_size_bit::value>(outBase, tmp);
            outBase += vector_element_count::value;
            tmp = set1<t_ve, vector_base_t_granularity::value>(0);
        }

        in8 = reinterpret_cast<const uint8_t *>(inBase);
        out8 = reinterpret_cast<uint8_t *>(outBase);
    }
};


}
